import json
from xml.etree.ElementTree import fromstring
from typing import Union

class FilterModule(object):
    def filters(self):
        return {
            'panos_op_stdout_to_dict': self.panos_op_stdout_to_dict,
            'panos_op_stdout_results_to_list': self.panos_op_stdout_results_to_list,
            'panos_op_get_zone_from_interface': self.panos_op_get_zone_from_interface,
            'panos_op_policy_match_result_to_bool': self.panos_op_policy_match_result_to_bool,
            'panos_op_routing_result_to_interfaces': self.panos_op_routing_result_to_interfaces
        }

    def panos_op_stdout_to_dict(self, result: dict) -> dict:
        """Takes the result dictionary generated by the panos_op command and converts stdout to a dictionary,
        making it easier to manipulate."""
        return json.loads(result.get("stdout"))

    def panos_op_routing_result_to_interfaces(self, results: Union[list, dict]) -> list:
        """Takes the output of the test routing command and returns the interfaces"""
        if isinstance(results, dict):
            results = [results]

        interfaces = []
        for result in results:
            data = json.loads(result.get("stdout"))
            interface = data.get("response").get("result").get("interface")
            interfaces.append(interface)

        return interfaces


    def panos_op_stdout_results_to_list(self, data: Union[list, dict]) -> list:
        """Takes a list of result dictionaries of command results for panos_op and returns a list of all the
        stdout data instead"""
        result = []
        if isinstance(data, dict):
            data = [data]
        for op_result in data:
            if op_result.get("stdout"):
                result.append(json.loads(op_result.get("stdout")))

        return result

    def panos_op_get_zone_from_interface(self, data: Union[list, dict], interface_names: list) -> list:
        """Looks up the output of the `show interface all` command, mapping the given interface_name to the zone.
        Note this parses the XML to ensure we capture all the different types of interfaces.
        """
        zones = []
        xml_data = fromstring(data.get("stdout_xml"))
        entries = xml_data.findall(".//entry")
        for entry in entries:
            name = entry.find("name")
            if name is not None:
                if name.text in interface_names:
                    zone = entry.find("zone")
                    if zone is not None:
                        zones.append(zone.text)

        return zones

    def panos_op_policy_match_result_to_bool(self, data: Union[list, dict]) -> bool:
        """Evaluates the output of the test-security policy match command, returning true if there is already a
        matching policy, or false otherwise."""
        if isinstance(data, dict):
            data = [data]

        for op_result in data:
            stdout = op_result.get("stdout")
            if stdout:
                stdout = json.loads(stdout)
                if stdout.get("response").get("result"):
                    return True
