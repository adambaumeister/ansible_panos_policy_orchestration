class FilterModule(object):
    def filters(self):
        return {}

def test_custom_filters():
    from custom_filters import FilterModule
    data = {'changed': False, 'msg': 'Done', 'stdout': '{"response": {"@status": "success", "result": {"hw": {"entry": [{"name": "ethernet1/1", "id": "16", "type": "0", "mac": "7c:1e:52:5a:a0:2d", "speed": "10000", "duplex": "full", "state": "up", "mode": "(autoneg)", "fec": "auto", "st": "10000/full/up"}, {"name": "ethernet1/2", "id": "17", "type": "0", "mac": "7c:1e:52:5a:a7:71", "speed": "10000", "duplex": "full", "state": "up", "mode": "(autoneg)", "fec": "auto", "st": "10000/full/up"}]}, "ifnet": {"entry": [{"name": "ethernet1/1", "id": "16", "tag": "0", "vsys": "1", "zone": "Untrust", "fwd": "vr:default", "ip": "10.10.11.4/24", "addr": null, "dyn-addr": null, "addr6": null}, {"name": "ethernet1/2", "id": "17", "tag": "0", "vsys": "1", "zone": "Trust", "fwd": "vr:default", "ip": "10.10.12.4/24", "addr": null, "dyn-addr": null, "addr6": null}]}}}}', 'stdout_xml': '<response status="success"><result>\n  <hw>\n    <entry>\n      <name>ethernet1/1</name>\n      <id>16</id>\n      <type>0</type>\n      <mac>7c:1e:52:5a:a0:2d</mac>\n      <speed>10000</speed>\n      <duplex>full</duplex>\n      <state>up</state>\n      <mode>(autoneg)</mode>\n      <fec>auto</fec>\n      <st>10000/full/up</st>\n    </entry>\n    <entry>\n      <name>ethernet1/2</name>\n      <id>17</id>\n      <type>0</type>\n      <mac>7c:1e:52:5a:a7:71</mac>\n      <speed>10000</speed>\n      <duplex>full</duplex>\n      <state>up</state>\n      <mode>(autoneg)</mode>\n      <fec>auto</fec>\n      <st>10000/full/up</st>\n    </entry>\n  </hw>\n  <ifnet>\n    <entry>\n      <name>ethernet1/1</name>\n      <id>16</id>\n      <tag>0</tag>\n      <vsys>1</vsys>\n      <zone>Untrust</zone>\n      <fwd>vr:default</fwd>\n      <ip>10.10.11.4/24</ip>\n      <addr />\n      <dyn-addr />\n      <addr6 />\n    </entry>\n    <entry>\n      <name>ethernet1/2</name>\n      <id>17</id>\n      <tag>0</tag>\n      <vsys>1</vsys>\n      <zone>Trust</zone>\n      <fwd>vr:default</fwd>\n      <ip>10.10.12.4/24</ip>\n      <addr />\n      <dyn-addr />\n      <addr6 />\n    </entry>\n  </ifnet>\n</result></response>', 'disconnected': False, 'stdout_lines': ['{"response": {"@status": "success", "result": {"hw": {"entry": [{"name": "ethernet1/1", "id": "16", "type": "0", "mac": "7c:1e:52:5a:a0:2d", "speed": "10000", "duplex": "full", "state": "up", "mode": "(autoneg)", "fec": "auto", "st": "10000/full/up"}, {"name": "ethernet1/2", "id": "17", "type": "0", "mac": "7c:1e:52:5a:a7:71", "speed": "10000", "duplex": "full", "state": "up", "mode": "(autoneg)", "fec": "auto", "st": "10000/full/up"}]}, "ifnet": {"entry": [{"name": "ethernet1/1", "id": "16", "tag": "0", "vsys": "1", "zone": "Untrust", "fwd": "vr:default", "ip": "10.10.11.4/24", "addr": null, "dyn-addr": null, "addr6": null}, {"name": "ethernet1/2", "id": "17", "tag": "0", "vsys": "1", "zone": "Trust", "fwd": "vr:default", "ip": "10.10.12.4/24", "addr": null, "dyn-addr": null, "addr6": null}]}}}}'], 'failed': False}
    m = FilterModule()
    result = m.panos_op_get_zone_from_interface(data, ["ethernet1/1"])
    assert result