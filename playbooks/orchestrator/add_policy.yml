---
# Accepts requests for security policy and converts into PAN-OS security rules.
# These tasks will first compare the request against given preset security policies to see if we can simply add
# the relevant pieces to existing groups and then commit/push.

# --- START PRESET POLICY SECTION ---
# This section of tasks automatically updates existing, pre-built policies by simply updating existing address-groups
# and given applications to the given application groups.
# This allows for maximum control over the brownfield policy, but will only catch certain use cases.

- name: Set Defaults
  ansible.builtin.set_fact:
    config_changed: false

# WEBSERVERS EXAMPLE
- name: Test against Webserver outbound policy
  ansible.builtin.include_tasks:
    file: preset/webservers_outbound_policy.yml

# SSH Jump Server Policy
- name: Test against SSH Jumpserver inbound policy
  ansible.builtin.include_tasks:
    file: preset/ssh_jumpserver_inbound_access.yml

# --- END PRESET POLICY SECTION ---

- name: Policy Creation Block
  block:
    - name: ADDRESS GROUP PRESET - Deploy the Source IP to policy based on the preset configuration
      ansible.builtin.include_tasks:
        file: preset/add_address_to_preset_group.yml
      vars:
        _address: "{{ source_ip }}"
        _address_group: "{{ source_address_group }}"
      when:
        - source_address_group is defined

    - name: ADDRESS GROUP PRESET - Deploy the Destination IP to policy based on the preset configuration
      ansible.builtin.include_tasks:
        file: preset/add_address_to_preset_group.yml
      vars:
        _address: "{{ destination_ip }}"
        _address_group: "{{ destination_address_group }}"
      when:
        - destination_address_group is defined

    - name: APP GROUP PRESET - Deploy the application to policy based on the preset configuration
      ansible.builtin.include_tasks:
        file: preset/add_application_to_preset_group.yml
      when:
        - application_group is defined
        - application is defined

    - name: Update that the config has changed
      ansible.builtin.set_fact:
        config_changed: true
  when:
    - policy_match

# --- Custom Section ---
# This section of tasks will attempt to create new security policies by caluclating as many values as possible
# Rules that are created here will always be grouped by TAG.

- name: RULE CREATION BLOCK - Triggers when no preset rules match
  block:
    - name: RULE policy lookup
      ansible.builtin.include_tasks:
        file: new/lookup_policy.yml

    - name: RULE creation
      ansible.builtin.include_tasks:
        file: new/create_policy.yml

    - name: Update that the config has changed
      ansible.builtin.set_fact:
        config_changed: true

  when:
    - not policy_match


- name: Commit Block - Triggers on any change
  block:
    - name: COMMIT all changes
      paloaltonetworks.panos.panos_commit_panorama:
        provider: "{{ provider }}"
        device_groups: ["{{ device_group | default(default_new_policy_device_group) }}"]
        description: "Commit Changes"
        admins:
          - "{{ provider.username }}"

    - name: PUSH to Device-group
      paloaltonetworks.panos.panos_commit_push:
        provider: "{{ provider }}"
        style: "device group"
        name: "{{ device_group | default(default_new_policy_device_group) }}"
        description: "Commit and push changes"
        admins:
          - "{{ provider.username }}"
  when: config_changed

- name: Test the new policy, if one was added
  ansible.builtin.include_tasks:
    file: new/lookup_policy.yml
  when: config_changed

- name: Print the results
  ansible.builtin.debug:
    msg: '{{ matches_existing_policy }}'
