---
# Gets the routing table from a given device and registers it. This can be included using include_tasks in a
# loop so that it handles devices that have either ARE or virtual routers configured.

- name: Set the routing table result list
  set_fact:
    _show_route: []
  when:
    - _show_route is not defined

- name: Get the ROUTING TABLE
  block:
    - name: Get the LEGACY ROUTING TABLE for each device
      paloaltonetworks.panos.panos_op:
        provider:
          ip_address: "{{ provider.ip_address }}"
          username: "{{ provider.username }}"
          password: "{{ provider.password }}"
          serial_number: "{{ item.serial }}"
        cmd: "show routing route"
      register: _show_route_result
  rescue:
    - name: Get the ROUTING TABLE for each device
      paloaltonetworks.panos.panos_op:
        provider:
          ip_address: "{{ provider.ip_address }}"
          username: "{{ provider.username }}"
          password: "{{ provider.password }}"
          serial_number: "{{ item.serial }}"
        cmd: "show advanced-routing route"
      register: _show_route_result

- name: Parse as JSON
  set_fact:
    _show_route_result_dict: "{{ _show_route_result.stdout | from_json }}"

- name: Set list of virtual routers
  set_fact:
    _virtual_routers: "{{ _virtual_routers | d([]) + [route['virtual-router']] }}"
  loop: "{{ _show_route_result_dict.response.result.entry }}"
  loop_control:
    loop_var: route

- name: Find the outbound interface(s)
  paloaltonetworks.panos.panos_op:
    provider:
      ip_address: "{{ provider.ip_address }}"
      username: "{{ provider.username }}"
      password: "{{ provider.password }}"
      serial_number: "{{ item.serial }}"
    cmd: "<test><routing><fib-lookup><virtual-router>{{ vr }}</virtual-router><ip>{{ _target_ip }}</ip></fib-lookup></routing></test>"
    cmd_is_xml: true
  register: _test_routing_result
  loop: "{{ _virtual_routers | unique }}"
  loop_control:
    loop_var: vr

- name: Get interfaces from results
  set_fact:
    _interface_list: "{{ _test_routing_result.results | panos_op_routing_result_to_interfaces }}"

- name: Get the zone
  paloaltonetworks.panos.panos_op:
    provider:
      ip_address: "{{ provider.ip_address }}"
      username: "{{ provider.username }}"
      password: "{{ provider.password }}"
      serial_number: "{{ item.serial }}"
    cmd: "show interface all"
  register: _show_interfaces_result

- name: Set the ZONE list
  set_fact:
    destination_zones: "{{ destination_zones | default([]) + _show_interfaces_result | panos_op_get_zone_from_interface(_interface_list) | default([]) }}"
