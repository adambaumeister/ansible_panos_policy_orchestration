---
# This tasks file connects to all the devices in a given device group and attempts to test to see if the traffic is
# Already permitted using "test security-policy-match".
#
# It will also try to enumerate which zones to use when defining new policy.
#
# There are some important assumptions that this playbook makes:
#   1. There is no NAT, or that if there is, it won't impact the logic
#   2. Traffic is not transiting intra-zone (i.e in teh same zone on one interface, out another interface in teh same
#       zone
#   3. We calcualte the zones and the firewalls to test by simply using ALL serial numbers connected to Panormaa. In
#       bigger environments this may be very slow, and you should change the filter to choose a subset either based on
#       the device group, or some other parameter retrievable at runtime
#
# Requires either 'device_group' or 'default_new_policy_device_group' to be set

- name: Populate all facts for policy
  set_fact:
    destination_port: "{{ destination_port | default('443') }}"
    protocol: "{{ protocol | default('6') }}"
    application: "{{ application | default('ssl') }}"

- name: Set the operating device group
  set_fact:
    _device_group: "{{ device_group }}"
  when:
    - device_group is defined

- name: Set the operating device group
  set_fact:
    _device_group: "{{ default_new_policy_device_group }}"
  when:
    - default_new_policy_device_group is defined

- name: Get all connected devices
  paloaltonetworks.panos.panos_op:
    provider: "{{ provider }}"
    cmd: "show devices connected"
  register: _show_devices_output

- name: Set JSON Object for stdout
  set_fact:
    _show_devices_output_dict: "{{ _show_devices_output | panos_op_stdout_to_dict }}"

- name: Set the list of items
  set_fact:
    _device_list: "{{ _show_devices_output_dict.response.result.devices.entry }}"

- name: Set the list of items (if single item response)
  set_fact:
    _device_list:
      - "{{ _show_devices_output_dict.response.result.devices.entry }}"
  when: "_show_devices_output_dict.response.result.devices.entry is mapping"

- name: Test the security policy - determines if a new policy is needed
  ansible.builtin.include_tasks:
    file: security_policy_match.yml
  with_items: "{{ _device_list }}"

- name: Get the zone for the DESTINATION IP
  ansible.builtin.include_tasks:
    file: get_zone_by_ip.yml
  vars:
    _target_ip: "{{ destination_ip }}"
  with_items: "{{ _device_list }}"
  when:
    - not matches_existing_policy
